// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id               Int       @id @default(autoincrement())
  nome             String
  senha            String
  email            String    @unique
  status           Boolean
  apelido          String?
  dataNascimento   DateTime
  dataCriacao      DateTime  @default(now())
  dataAtualizacao  DateTime  @updatedAt
  tipoUsuario      String

  avaliacoes       Avaliacao[]
}

model Filme {
  id               Int          @id @default(autoincrement())
  nome             String
  diretor          String
  anoLancamento    Int
  duracao          Int
  produtora        String
  classificacao    String
  poster           String

  avaliacoes       Avaliacao[]
  generos          GeneroFilme[]
}

model Genero {
  id          Int           @id @default(autoincrement())
  descricao   String

  filmes      GeneroFilme[]
}

model GeneroFilme {
  id          Int     @id @default(autoincrement())
  idGenero    Int
  idFilme     Int

  genero      Genero  @relation(fields: [idGenero], references: [id])
  filme       Filme   @relation(fields: [idFilme], references: [id])

  @@unique([idGenero, idFilme])
}

model Avaliacao {
  idUsuario   Int
  idFilme     Int
  nota        Float
  comentario  String

  usuario     Usuario @relation(fields: [idUsuario], references: [id])
  filme       Filme   @relation(fields: [idFilme], references: [id])

  @@id([idUsuario, idFilme]) // chave prim√°ria composta
}
